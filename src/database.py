import json
import os
from pathlib import Path

from aiogram import types

from src.user import User

father_id = 747120601


_database_path = ''


class text:
    no_access = "<b>üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.</b> üîí\n\n"\
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É üì©"
    send_access = "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üì®"
    access_sent = "–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üì®, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ ‚è≥."

    access_success = "<b>‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–ª—É—á–µ–Ω!</b>\n" \
                     "\n" \
                     "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üíª"
    access_failed = "<b>‚ùå–û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ‚ùå</b>\n" \
                    "\n" \
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ ‚è≥"

    callback_access_success = "\n\n<b>–†–µ—à–µ–Ω–∏–µ: ‚úÖ</b>"
    callback_access_failed = "\n\n<b>–†–µ—à–µ–Ω–∏–µ: ‚ùå</b>"

    pc_menu = "<b>–ì–ª–∞–≤–Ω–∞—è: üìë</b>"

    pc_off = "<b>–í—ã–∫–ª—é—á–∞–µ–º ‚èª</b>\n" \
             "\n" \
             "–ë–æ—Ç –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω –≤–º–µ—Å—Ç–µ —Å –ü–ö üñ•Ô∏èüîå"

    pc_restart = "<b>üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º</b>\n" \
             "\n" \
             "–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤–º–µ—Å—Ç–µ —Å –ü–ö üñ•Ô∏èüîå"

    @staticmethod
    def access_request(message: types.Message) -> str:
        user = User(message)
        return f"<b>üñ•Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –ü–ö –æ—Ç:</b>\n" \
               f"\n" \
               f"üÜî Id: {user.id}\n" \
               f"üë§ Username: @{user.username}\n"

    @staticmethod
    def access(message: types.Message) -> str:
        return f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{message.chat.username}</b>!"


keyboard_text = {
    'no_access': ['üîì–ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø'],
    'menu': ['‚ùå –í—ã–∫–ª—é—á–∏—Ç—å ‚ùå', 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ üîÑ'],
    'user_access_success': ['–ù–∞—á–∞—Ç—å üöÄ'],
    'user_access_failed': ['–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è'],
    'access_request': ['‚úÖ', '‚ùå']
}
keyboard_parameters = {
    'access_request': {
        'inline_callbacks': ['access_success', 'access_failed']
    },
    'user_access_success': {
        'inline_callbacks': ['user_access_success']
    },
    'user_access_failed': {
        'inline_callbacks': ['user_access_failed']
    }
}


def getAccess(message: types.Message) -> bool:
    user = User(message)
    if not os.path.exists(_database_path):
        setDefault(message)
        return False
    try:
        with open(_database_path, 'r+') as file:
            if os.stat(_database_path).st_size == 0:
                setDefault(message)
                return False
            users: dict = json.load(file)
        if users.get(str(user.id)) is not None:
            user.set(users.get(str(user.id)))
            return user.access
        else:
            with open(_database_path, 'w') as file:
                data = users
                data[user.id] = user.json()
                json.dump(data, file, indent=4)
            return False
    except (json.JSONDecodeError, IOError):
        setDefault(message)
        return False


def setDefault(message: types.Message):
    user = User(message)
    with open(_database_path, 'w') as file:
        json.dump({user.id: user.json()}, file, indent=4)


def setAccess(id: int, access: bool):
    with open(_database_path, 'r') as file:
        users: dict = json.load(file)

    user = User()
    user.set(users.get(str(id)))
    user.access = access
    users[str(id)] = user.json()

    with open(_database_path, 'w') as file:
        json.dump(users, file, indent=4)